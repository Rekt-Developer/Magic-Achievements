name: GitHub Achievements Tracker

# Comprehensive event triggers
on:
  push:
    branches: 
      - main
      - develop
  pull_request:
    types: 
      - opened
      - closed
      - synchronize
  issues:
    types: 
      - opened
      - closed
      - labeled
  workflow_dispatch:
    inputs:
      debug_mode:
        description: 'Enable debug logging'
        required: false
        default: 'false'
        type: boolean

# Granular permissions for enhanced security
permissions:
  contents: read
  issues: write
  pull-requests: write
  discussions: write

# Define reusable environment variables
env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

# Concurrency management
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Main workflow job for tracking achievements
jobs:
  github-achievements:
    runs-on: ubuntu-latest
    
    # Conditional job execution
    if: >
      github.event_name != 'pull_request' || 
      github.event.action != 'synchronize'

    steps:
      # Comprehensive repository checkout
      - name: Advanced Repository Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch full history
          persist-credentials: false

      # Achievement: Quickdraw (Fast Issue/PR Response)
      - name: 🚀 Quickdraw Achievement Tracker
        if: github.event_name == 'issues' || github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const rapidResponseTime = 5 * 60 * 1000; // 5 minutes
            const eventType = context.eventName;
            const eventPayload = context.payload;
            
            const rapidResponseAchievement = {
              issueNumber: eventType === 'issues' ? eventPayload.issue.number : eventPayload.pull_request.number,
              createdAt: new Date(eventType === 'issues' ? eventPayload.issue.created_at : eventPayload.pull_request.created_at),
              respondedAt: new Date(),
              type: eventType
            };

            // Calculate response time
            const responseTime = rapidResponseAchievement.respondedAt - rapidResponseAchievement.createdAt;
            
            if (responseTime <= rapidResponseTime) {
              console.log(`🏆 Quickdraw Achievement Earned for ${eventType} #${rapidResponseAchievement.issueNumber}`);
              
              // Optional: Add a comment or label
              if (eventType === 'issues') {
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: rapidResponseAchievement.issueNumber,
                  body: "🏆 Quickdraw Achievement: Rapid Response Activated!"
                });
              }
            }

      # Achievement: Pull Shark (Multiple Pull Request Contributions)
      - name: 🦈 Pull Shark Achievement Tracker
        if: github.event_name == 'pull_request' && github.event.action == 'closed'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const pullRequester = context.payload.pull_request.user.login;
            
            // Fetch user's pull requests
            const pullsResponse = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'closed',
              creator: pullRequester
            });

            // Pull Shark Achievement Levels
            const achievementLevels = {
              bronzeSharks: 5,
              silverSharks: 16,
              goldSharks: 32
            };

            const totalPulls = pullsResponse.data.length;

            if (totalPulls >= achievementLevels.goldSharks) {
              console.log(`🏆 Pull Shark Gold Achievement: ${pullRequester} - ${totalPulls} PRs`);
            } else if (totalPulls >= achievementLevels.silverSharks) {
              console.log(`🏆 Pull Shark Silver Achievement: ${pullRequester} - ${totalPulls} PRs`);
            } else if (totalPulls >= achievementLevels.bronzeSharks) {
              console.log(`🏆 Pull Shark Bronze Achievement: ${pullRequester} - ${totalPulls} PRs`);
            }

      # Achievement: Galaxy Brain (Discussions and Knowledge Sharing)
      - name: 🌌 Galaxy Brain Achievement Tracker
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const discussionContributors = new Set();
            
            // Fetch recent discussions
            const discussionsResponse = await github.rest.discussions.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open'
            });

            discussionsResponse.data.forEach(discussion => {
              discussionContributors.add(discussion.user.login);
            });

            console.log(`🌟 Galaxy Brain Contributors: ${[...discussionContributors]}`);

      # Artifact Tracking
      - name: 📦 Artifact Analysis
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const artifacts = await github.rest.actions.listArtifactsForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo
            });

            console.log(`🏺 Total Artifacts: ${artifacts.data.total_count}`);

      # Debug and Logging
      - name: 🔍 Workflow Insights
        if: inputs.debug_mode == 'true'
        run: |
          echo "Workflow triggered by: ${{ github.event_name }}"
          echo "Repository: ${{ github.repository }}"
          echo "Ref: ${{ github.ref }}"

      # Final Achievement Summary
      - name: 🌟 Achievement Summary
        run: |
          echo "🏆 GitHub Achievements Tracked Successfully"
          echo "📊 See workflow logs for detailed achievements"

  # Error Handling Job
  error-handler:
    runs-on: ubuntu-latest
    if: failure()
    steps:
      - name: Error Notification
        run: |
          echo "❌ Workflow encountered an error"
          exit 1
