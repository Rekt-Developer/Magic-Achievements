name: Magic Achievements

on:
  issues:
    types: [opened, reopened]
  pull_request:
    types: [opened, synchronize, reopened]
  discussion:
    types: [answered]
  star:
    types: [created]
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: read  # Reduced to read-only for security
  issues: write
  pull_request_reviews: write
  discussions: write

jobs:
  achievements:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for comprehensive context

    # Pair Extraordinaire: Safely add co-authors to PRs
    - name: Add Co-Authors to Pull Requests
      if: github.event_name == 'pull_request' && github.event.action == 'opened'
      uses: actions/github-script@v7
      env:
        POTENTIAL_COAUTHORS: |
          John Doe <johndoe@example.com>
          Jane Smith <janesmith@example.com>
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const coauthors = process.env.POTENTIAL_COAUTHORS.trim().split('\n');
          const randomCoauthor = coauthors[Math.floor(Math.random() * coauthors.length)];
          
          const prBody = context.payload.pull_request.body || "";
          const coauthorMessage = `\n\nCo-authored-by: ${randomCoauthor}`;
          
          await github.rest.pulls.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: context.payload.pull_request.number,
            body: `${prBody}${coauthorMessage}`,
          });

    # Smart Issue Management
    - name: Intelligent Issue Handling
      if: github.event_name == 'issues' && github.event.action == 'opened'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const issueTitle = context.payload.issue.title.toLowerCase();
          const labels = [];

          // Automatic labeling
          if (issueTitle.includes('bug')) labels.push('type: bug');
          if (issueTitle.includes('feature')) labels.push('type: enhancement');
          if (issueTitle.includes('documentation')) labels.push('type: docs');

          if (labels.length > 0) {
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: labels
            });
          }

    # Pull Request Quality Gate
    - name: Pull Request Quality Check
      if: github.event_name == 'pull_request' && github.event.action == 'opened'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const pr = context.payload.pull_request;
          const changedFiles = await github.rest.pulls.listFiles({
            owner: context.repo.owner,
            repo: context.repo.repo,
            pull_number: pr.number
          });

          // Check file count and size
          if (changedFiles.data.length > 10) {
            await github.rest.pulls.createReview({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number,
              event: 'REQUEST_CHANGES',
              body: 'Too many files changed. Please break this PR into smaller, focused changes.'
            });
          }

    # Discussion Engagement Tracking
    - name: Track Discussion Engagement
      if: github.event_name == 'discussion' && github.event.action == 'answered'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const discussionTitle = context.payload.discussion.title;
          const answererLogin = context.payload.answer.author.login;

          console.log(`Discussion "${discussionTitle}" answered by ${answererLogin}`);
          
          // Optional: You could log this to an external service or create a comment

    # Star Appreciation
    - name: Star Appreciation
      if: github.event_name == 'star'
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          const stargazer = context.payload.sender.login;
          
          // Create a thank you issue
          await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `Thank You, ${stargazer}!`,
            body: `A big thank you to @${stargazer} for starring our repository! ðŸŒŸ`
          });

    # Error Handling and Logging
    - name: Workflow Error Handling
      if: failure()
      uses: actions/github-script@v7
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          core.setFailed('Workflow encountered an error. Please check the logs.')
